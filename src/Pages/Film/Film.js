import React, {useEffect, useRef, useState} from "react";
import './Film.css';
import '../../Components/Navbar/Navbar.css';
import BlackFooter from "../../Components/Black Footer/Black Footer";
import axios from "axios";

import '../../Components/Dropdown/Dropdown.css';
import '../../Components/Level Selector/Level-Selector.css';


const categories2 = ['–í—Å–µ', '–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ', '–ì–ª–∞–≥–æ–ª—ã', '–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ', '–ù–∞—Ä–µ—á–∏—è'];
const levels = ['A1', 'A2', 'B1', 'B2', 'C1', 'C2'];

const Film = () => {


    const [selectedAge, setSelectedAge] = useState('–í—Å–µ');
    const [selectedLevel, setSelectedLevel] = useState('A2');
    const [words, setWords] = useState([]);
    const [isAgeDropdownOpen, setIsAgeDropdownOpen] = useState(false);

    const movieId = 5; // üî• –ü–æ—Å—Ç–∞–≤–∏–º –∑–¥–µ—Å—å movieId —Å—Ç–∞—Ç–∏—á–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º –ø—Ä–æ–ø—Å–æ–º –ø–æ—Ç–æ–º

    useEffect(() => {
        const fetchWords = async () => {
            try {
                const params = {};
                if (selectedLevel && selectedLevel !== '–í—Å–µ') params.level = selectedLevel;
                if (selectedAge && selectedAge !== '–í—Å–µ') {
                    switch (selectedAge) {
                        case '–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ':
                            params.partOfSpeech = 'noun';
                            break;
                        case '–ì–ª–∞–≥–æ–ª—ã':
                            params.partOfSpeech = 'verb';
                            break;
                        case '–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ':
                            params.partOfSpeech = 'adjective';
                            break;
                        case '–ù–∞—Ä–µ—á–∏—è':
                            params.partOfSpeech = 'adverb';
                            break;
                        default:
                            break;
                    }
                }

                const response = await axios.get(`http://localhost:8080/find/fltr/movie`, {
                    params: {
                        movieId,
                        ...params,
                    },
                });
                // setWords(response.data);

                console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data); // üëà –î–æ–±–∞–≤—å —ç—Ç–æ!

// –¢–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
                setWords(Array.isArray(response.data) ? response.data : response.data.words || []);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤:', error);
            }

        };

        fetchWords();
    }, [selectedAge, selectedLevel, movieId]);


    const [expressions, setExpressions] = useState([]);
    useEffect(() => {
        const fetchExpressions = async () => {
            try {
                const response = await axios.get(`http://localhost:8080/find/expressions`, {
                    params: {
                        movieId,
                    },
                });

                console.log('Expressions:', response.data);

                setExpressions(Array.isArray(response.data) ? response.data : []);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π:', error);
            }
        };

        fetchExpressions();
    }, [movieId]);




    return (
        <>
            <div className="navbar-container">
                <div className="navbar">
                    <div className="logo">
                        <span className="uk">uk</span> <span className="open">open</span>
                    </div>
                    <button className="start-button">–ù–∞—á–∞—Ç—å</button>
                </div>
            </div>
            <div className="learn-watch-content-container">
                <div className="learn-watch">
                    <img src={'https://media.mustapp.me/must/posters/w342/s8nco4vYuVwWFvxXR3vyGmS5K7F.jpg'} className="cover-pic" alt="Heart Icon"/>
                    <div className="space">
                        <div>
                            <div className="Montserrat extra-bold seventy-black">–û—Ç–ø—É—Å–∫ –ø–æ –æ–±–º–µ–Ω—É</div>
                            <div className="Montserrat extra-bold thirty-black date-line">8 –¥–µ–∫–∞–±—Ä—è 2006</div>
                            <div className="divider"></div>
                            <div className="Golos semi-bold seventy-black">–û–±–∑–æ—Ä</div>
                            <div className="review">
                                –ê–π—Ä–∏—Å –°–∏–º–ø–∫–∏–Ω—Å, –∞–≤—Ç–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω–æ–π —Å–≤–∞–¥–µ–±–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏ –≤ –ª–æ–Ω–¥–æ–Ω—Å–∫–æ–π ¬´Daily Telegraph¬ª, –∂–∏–≤–µ—Ç –≤ –æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º –∫–æ—Ç—Ç–µ–¥–∂–µ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –ø—Ä–æ–≤–∏–Ω—Ü–∏–∏.
                                –û–Ω–∞ –≤–ª—é–±–ª–µ–Ω–∞ –≤ –º—É–∂—á–∏–Ω—É, –∫–æ—Ç–æ—Ä—ã–π –ª—é–±–∏—Ç –¥—Ä—É–≥—É—é. –î–∞–ª–µ–∫–æ –æ—Ç –Ω–µ–µ –≤ –Æ–∂–Ω–æ–π –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–∏ –∂–∏–≤–µ—Ç –ê–º–∞–Ω–¥–∞ –í—É–¥—Å, –≤–ª–∞–¥–µ–ª–∏—Ü–∞ –ø—Ä–æ—Ü–≤–µ—Ç–∞—é—â–µ–≥–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞,
                                –∑–∞–Ω–∏–º–∞—é—â–µ–≥–æ—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ä–æ–ª–∏–∫–æ–≤ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤. –û–Ω–∞ –≤–¥—Ä—É–≥ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç, —á—Ç–æ –ª—é–±–∏–º—ã–π —á–µ–ª–æ–≤–µ–∫ –µ–π –∏–∑–º–µ–Ω—è–µ—Ç.–î–≤–µ –Ω–µ–∑–Ω–∞–∫–æ–º—ã–µ –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º –∂–µ–Ω—â–∏–Ω—ã, –∂–∏–≤—É—â–∏–µ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 10 000 –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞,
                                –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —Å—Ö–æ–¥–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏. –ò –æ–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –í –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –Ω–∞ —Å–∞–π—Ç–µ –æ–±–º–µ–Ω–∞ –∂–∏–ª—å–µ–º –Ω–∞ –≤—Ä–µ–º—è –æ—Ç–ø—É—Å–∫–∞. –ü–µ—Ä–µ–¥ –†–æ–∂–¥–µ—Å—Ç–≤–æ–º –ê–π—Ä–∏—Å –∏ –ê–º–∞–Ω–¥–∞ —Ä–µ—à–∞—é—Ç –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –æ—Ç —Å–≤–æ–∏—Ö –ø—Ä–æ–±–ª–µ–º, –¥–æ–≥–æ–≤–æ—Ä–∏–≤—à–∏—Å—å
                                –ø–æ–º–µ–Ω—è—Ç—å—Å—è –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–º–∏ –∏ –ø–æ–∂–∏—Ç—å –¥—Ä—É–≥ —É –¥—Ä—É–≥–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö –Ω–µ–¥–µ–ª—å.
                            </div>
                            <span className="custom-span">üéÑ&nbsp;&nbsp;‚ù§Ô∏èÔ∏è&nbsp;&nbsp;‚úàÔ∏è&nbsp;&nbsp;üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø</span>
                        </div>
                    </div>
                </div>
                <br/>
                <div className="learn-watch">
                    <div className="divider"></div>
                </div>
                <div className="learn-watch">
                    <div className="Charis regular black">–û—Å–Ω–æ–≤–Ω–æ–π –≤–æ–∫–∞–±—É–ª—è—Ä</div>
                </div>
                <br/>
                <div className="learn-watch">
                    <div className="table-container">
                        <div className="table-head">
                            <LevelSelector selectedLevel={selectedLevel} setSelectedLevel={setSelectedLevel}/>
                            <Dropdown
                                categories={categories2}
                                selectedCategory={selectedAge}
                                setSelectedCategory={setSelectedAge}
                                isOpen={isAgeDropdownOpen}
                                setIsOpen={setIsAgeDropdownOpen}
                            />
                        </div>

                        {/* –¢–∞–±–ª–∏—Ü–∞ */}
                        <div className="table-divider"></div>
                        <div className="table-middle">
                            <div className="blue-row">
                                <th className="Montserrat medium grey">#</th>
                                <th className="Montserrat medium grey eng">–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ</th>
                                <th className="Montserrat medium grey rus">–†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥</th>
                            </div>

                            {words.map((word, index) => (
                                <div key={word.id} className="trnsp-row">
                                    <th className="Montserrat medium grey">{index + 1}</th>
                                    <th className="Montserrat medium grey eng">{word.enWord}</th>
                                    <th className="Montserrat medium grey rus">{word.ruWord}</th>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
                <br/>
                <div className="learn-watch">
                    <div className="Charis regular black">–í—ã—Ä–∞–∂–µ–Ω–∏—è</div>
                </div>
                <br/>
                <div className="learn-watch">
                    {/*<div className="vocab-list">*/}
                    {/*    <div className="row">*/}
                    {/*        <div className="term">Once in a blue moon</div>*/}
                    {/*        <div className="definition">–ß—Ç–æ-—Ç–æ, —á—Ç–æ —Å–ª—É—á–∞–µ—Ç—Å—è —Ä–µ–¥–∫–æ</div>*/}
                    {/*    </div>*/}
                    {/*    <div className="row">*/}
                    {/*        <div className="term">All in good time</div>*/}
                    {/*        <div className="definition">*/}
                    {/*            –í—ã—Ä–∞–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Å–æ–≤–µ—Ç—É—é—Ç –∫–æ–º—É-—Ç–æ –Ω–∞–±—Ä–∞—Ç—å—Å—è —Ç–µ—Ä–ø–µ–Ω–∏—è, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–æ, —á–µ–≥–æ –∂–¥—ë—Ç —á–µ–ª–æ–≤–µ–∫, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è*/}
                    {/*        </div>*/}
                    {/*    </div>*/}
                    {/*    <div className="row">*/}
                    {/*        <div className="term">Day</div>*/}
                    {/*        <div className="definition">–î–µ–Ω—å</div>*/}
                    {/*    </div>*/}
                    {/*    <div className="row">*/}
                    {/*        <div className="term">Map</div>*/}
                    {/*        <div className="definition">–ö–∞—Ä—Ç–∞</div>*/}
                    {/*    </div>*/}
                    {/*</div>*/}

                    <div className="vocab-list">
                        {expressions.map((expression) => (
                            <div key={expression.id} className="row">
                                <div className="term">{expression.enWord}</div>
                                <div className="definition">{expression.ruWord}</div>
                            </div>
                        ))}
                    </div>


                </div>

            </div>
            <BlackFooter/>
        </>
    );
};

const LevelSelector = ({ selectedLevel, setSelectedLevel }) => {
    const activeIndex = levels.indexOf(selectedLevel);

    return (
        <div className="level-selector">
            <div
                className="highlight"
                style={{ transform: `translateX(${activeIndex * 100}%)` }}
            />
            {levels.map((level, index) => (
                <div
                    key={level}
                    className={`level-item ${index === activeIndex ? 'active' : ''}`}
                    onClick={() => setSelectedLevel(level)}
                >
                    {level}
                </div>
            ))}
        </div>
    );
};

const Dropdown = ({ categories, selectedCategory, setSelectedCategory, isOpen, setIsOpen }) => {
    const dropdownRef = useRef(null);

    const toggleDropdown = () => {
        setIsOpen(!isOpen);
    };

    const handleCategoryClick = (category) => {
        setSelectedCategory(category);
        setIsOpen(false);
    };

    const handleClickOutside = (event) => {
        if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
            setIsOpen(false);
        }
    };

    useEffect(() => {
        if (isOpen) {
            document.addEventListener('mousedown', handleClickOutside);
        } else {
            document.removeEventListener('mousedown', handleClickOutside);
        }

        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [isOpen]);

    return (
        <div className="dropdown" ref={dropdownRef}>
            <button className="dropdown-button" onClick={toggleDropdown}>
                <div className="default-category">{selectedCategory}</div>
                <svg className={`arrow ${isOpen ? 'open' : ''}`} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1" strokeLinecap="round" strokeLinejoin="round">
                    <path d="M19 9l-7 7-7-7" />
                </svg>
            </button>
            {isOpen && (
                <div className="dropdown-menu">
                    {categories.map((category, index) => (
                        <div key={index} className="dropdown-item" onClick={() => handleCategoryClick(category)}>
                            {category}
                        </div>
                    ))}
                </div>
            )}
        </div>
    );
};

export default Film;
